// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

OECI_LIB_VERSION = env.OECI_LIB_VERSION ?: "master"
oe = library("OpenEnclaveCommon@${OECI_LIB_VERSION}").jenkins.common.Openenclave.new()

GLOBAL_TIMEOUT_MINUTES = 240
CTEST_TIMEOUT_SECONDS = 480
GLOBAL_ERROR = null

DOCKER_TAG = env.DOCKER_TAG ?: "latest"
AGENTS_LABELS = [ 
    "SGX1":    env.UBUNTU_SGX_CUSTOM_LABEL ?: "UBUNTU-SGX1",
    "SGX1FLC":    env.UBUNTU_SGX_CUSTOM_LABEL ?: "UBUNTU-SGXFLC",
    "ubuntu-sgx":    env.UBUNTU_SGX_CUSTOM_LABEL ?: "UBUNTU-SGX"
]


def simulationTest(String version, String platform_mode, String build_type, String lvi_mitigation = 'None', String lvi_mitigation_skip_tests = 'OFF') {
    def has_quote_provider = "OFF"
    if (platform_mode == "SGX1FLC") {
        has_quote_provider = "ON"    
    }
    stage("clang-7 Ubuntu${version} ${platform_mode} ${build_type} LVI_MITIGATION=${lvi_mitigation}") {
        node(agent_labels) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                    def task = """
                               cmake ${WORKSPACE}                                            \
                                    -G Ninja                                                 \
                                    -DCMAKE_BUILD_TYPE=${build_type}                         \
                                    -DHAS_QUOTE_PROVIDER=${has_quote_provider}               \
                                    -DLVI_MITIGATION=${lvi_mitigation}                       \
                                    -DLVI_MITIGATION_BINDIR=/usr/local/lvi-mitigation/bin    \
                                    -DLVI_MITIGATION_SKIP_TESTS=${lvi_mitigation_skip_tests} \
                                    -Wdev
                               ninja -v
                               ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                               """
                    oe.Run("clang-7", task)
            }
        }
    }
}

def AArch64GNUTest(String version, String build_type) {
    stage("AArch64 GNU gcc Ubuntu${version} ${build_type}") {
        node(AGENTS_LABELS["ubuntu-sgx"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                            cmake ${WORKSPACE}                                                     \
                                -G Ninja                                                           \
                                -DCMAKE_BUILD_TYPE=${build_type}                                   \
                                -DCMAKE_TOOLCHAIN_FILE=${WORKSPACE}/cmake/arm-cross.cmake          \
                                -DOE_TA_DEV_KIT_DIR=/devkits/vexpress-qemu_armv8a/export-ta_arm64  \
                                -DHAS_QUOTE_PROVIDER=OFF                                           \
                                -Wdev
                            ninja -v
                            """
                oe.Run("cross", task)
            }
        }
    }
}

def checkDevFlows(String version) {
    stage('Default compiler') {
        node(AGENTS_LABELS["ubuntu-sgx"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DHAS_QUOTE_PROVIDER=OFF -Wdev --warn-uninitialized -Werror=dev
                           ninja -v
                           """
                oe.Run("clang-7", task)
            }
        }
    }
}

def checkCI() {
    stage('Check CI') {
        node(AGENTS_LABELS["ubuntu-sgx"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                // At the moment, the check-ci script assumes that it's executed from the
                // root source code directory.
                oe.Run("clang-7", "cd ${WORKSPACE} && ./scripts/check-ci")
            }
        }
    }
}

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '90',
                                      artifactNumToKeepStr: '180',
                                      daysToKeepStr: '90',
                                      numToKeepStr: '180')),
            [$class: 'JobRestrictionProperty']])

try{
    oe.emailJobStatus('STARTED')
    if(params.FULL_TEST_SUITE == "true") {
      stage("Full Test Suite") {
        parallel "Check CI" :                                               { checkCI() },
                 "Check Developer Experience Ubuntu 18.04" :                { checkDevFlows('18.04') },
                 "1804 clang-7 SGX1 Debug" :                            { simulationTest('18.04', 'SGX1', 'Debug')},
                 "1804 clang-7 SGX1 Release" :                          { simulationTest('18.04', 'SGX1', 'Release')},
                 "1804 clang-7 SGX1-FLC Debug" :                        { simulationTest('18.04', 'SGX1FLC', 'Debug')},
                 "1804 clang-7 SGX1-FLC Release" :                      { simulationTest('18.04', 'SGX1FLC', 'Release')}
      }
    } else {
      stage("PR Testing") {
        parallel "Check CI" :                                               { checkCI() },
                 "Check Developer Experience Ubuntu 18.04" :                { checkDevFlows('18.04') },
                 "1804 clang-7 SGX1 Release" :                          { simulationTest('18.04', 'SGX1', 'Release', 'ON')},
                 "1804 clang-7 SGX1-FLC Debug" :                        { simulationTest('18.04', 'SGX1FLC', 'Debug', 'ON')},
                 "1804 clang-7 SGX1-FLC Release" :                      { simulationTest('18.04', 'SGX1FLC', 'Release', 'ON')}
      }
    }
} catch(Exception e) {
    println "Caught global pipeline exception :" + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
    oe.emailJobStatus(currentBuild.result)
}
